const home_template = require('./Pages/home.hbs')
const alarm_template = require('./Pages/alarm.hbs')
const memo_template = require('./Pages/memo.hbs')
const image_template = require('./Pages/image.hbs')

const Home = home_template()
const Alarm = alarm_template()
const Memo = memo_template()
const Image = image_template()

const {alarm} = require('./src/Alarm')
const {memo} = require('./src/Memo')
const {image} = require('./src/Image')

const routes = {
    '/':Home,
    '/alarm': Alarm,
    '/memo' : Memo,
    '/image': Image
}


function InitialRoutes(element){
    element.innerHTML=routes['/']
    window.onpopstate=()=>{
        element.innerHTML=routes[window.location.pathname]
        window.location.reload()
    }
}

function historyRoutePush(pathname,element){
    window.history.pushState({},pathname,window.location.origin+pathname)
    element.innerHTML=routes[pathname]
    // 페이지로 넘어가면 해당 페이지의 함수 실행
    if(pathname==='/alarm') alarm()
    else if(pathname==='/memo') memo()
    else if(pathname==='/image') image()
}


module.exports = {
    InitialRoutes,
    historyRoutePush
}


/////////////////


require('./main.css')
const { InitialRoutes, historyRoutePush } = require('./router')
const {checkAlarm,isAdd} = require('./src/Alarm')
const AppDiv = document.querySelector('.contents')

InitialRoutes(AppDiv)
window.onload = () => {
    const historyLinker = document.querySelectorAll('.link')

    historyLinker.forEach(el => {
      el.addEventListener('click', (event) => {
        const pathname = event.target.getAttribute('route')
        historyRoutePush(pathname, AppDiv)
      })
    })
  
}

let localAlarmObj = JSON.parse(localStorage.getItem('alarm-array'))
let localAlarmList= []
if(localAlarmObj) localAlarmObj.map(el=>localAlarmList.push(el.item))

function Clock () {
    const clock = document.querySelector('.clock')
    let today = new Date()
    
    let year = today.getFullYear()
    let month = today.getMonth()+1
    let date = today.getDate()
    let hours = today.getHours()
    let minutes = today.getMinutes()
    let seconds = today.getSeconds()
    let alarmCheck = String(hours).padStart(2,'0')+String(minutes).padStart(2,'0')

    if(isAdd()){
      localAlarmObj = JSON.parse(localStorage.getItem('alarm-array'))
      localAlarmList= []
      if(localAlarmObj) localAlarmObj.map(el=>localAlarmList.push(el.item))
    }
    
    if(localAlarmList.includes(alarmCheck)){
      alert(hours+"시 "+minutes+"분"+" 알람")
      
      let index = localAlarmList.indexOf(alarmCheck)
      localAlarmList.splice(index,1)

      localAlarmObj=localAlarmObj.filter(el=>el.item!==alarmCheck)
      localStorage.setItem('alarm-array',JSON.stringify(localAlarmObj))
      
      const path = document.querySelector("section div")
      if(path.classList.contains("Alarm")) checkAlarm()
      
    }

    clock.innerText = String(year)+ '년 '
                        + String(month) + '월 '
                        + String(date) + '일 '
                        + String(hours).padStart(2,'0') + '시 '
                        + String(minutes).padStart(2,'0') + '분 '
                        + String(seconds).padStart(2,'0') + '초'
}


Clock()
setInterval(Clock,1000)



///////////////////////////////////


const ALARM_KEY = 'alarm-array'
let alarmList
let alarmArr = localStorage.getItem(ALARM_KEY)
let alarmAdd = false
function alarm(){
    let alarmNewBtn = document.querySelector('.alarm-new')
    let alarmBackBtn = document.querySelector('.alarm-back')
    let inputform = document.querySelector('.alarm-input-form')
    let saveAlarmBtn = document.querySelector('.save-alarm')
    alarmList = document.querySelector('.alarm-list')
    alarmArr = localStorage.getItem(ALARM_KEY)

    if(!alarmArr) alarmArr=[]
    else alarmArr = JSON.parse(alarmArr)
    alarmArr.forEach(renderAlarmList)


    alarmBackBtn.addEventListener('click',()=>{
        window.history.back()
    })

    saveAlarmBtn.addEventListener('click',()=>{
        let day= document.getElementById('day')
        let hours= document.getElementById('hours')
        let minutes= document.getElementById('minutes')
        day = day.options[day.selectedIndex].value
        hours = hours.options[hours.selectedIndex].value
        minutes = minutes.options[minutes.selectedIndex].value

        if(day==='PM') hours=String(12+parseInt(hours))

        let newAlarm = {
            id : Date.now(),
            item : hours+minutes
        }
        renderAlarmList(newAlarm)
        alarmArr.push(newAlarm)
        localStorage.setItem(ALARM_KEY,JSON.stringify(alarmArr))
        alarmAdd = true
        inputform.classList.add('invisible')
    })

    alarmNewBtn.addEventListener('click',()=>{
        inputform.classList.remove('invisible')
    })
}

function renderAlarmList(newAlarm){
    let time = newAlarm.item
    let hour = parseInt(time.slice(0,2))
    let minutes = time.slice(2)

    if(hour>12) {
        time='오후 '
        hour=String(hour-12).padStart(2,'0')
    }
    else time='오전 '

    time+=hour + '시 '+minutes+'분'

    const li = document.createElement("li")
    li.id = newAlarm.id
    const span = document.createElement("span")
    span.innerText=time
    const button = document.createElement("button")
    button.innerText="삭제"
    button.addEventListener("click",deleteAlarm)
    li.appendChild(span)
    li.appendChild(button)
    alarmList.appendChild(li)
}

function deleteAlarm(event){
    const target_li = event.target.parentElement
    alarmArr=alarmArr.filter(el=>el.id!==parseInt(target_li.id))
    localStorage.setItem(ALARM_KEY,JSON.stringify(alarmArr))
    target_li.remove()

    alarmAdd = true
}

function checkAlarm(){
    let local = JSON.parse(localStorage.getItem(ALARM_KEY))
    let alarmContainer = document.querySelector('.alarm-container')
    alarmList.remove()
    let ul = document.createElement('ul')
    ul.classList.add('alarm-list')
    alarmContainer.appendChild(ul)
    alarmList=ul
    local.forEach(renderAlarmList)
}

function isAdd(){
    if(alarmAdd) {
        alarmAdd=false
        return true
    }
    return false
}
module.exports = {
    alarm,
    checkAlarm,
    isAdd
}






/////////////////////





const ICONARR_KEY = 'icon-array'
const HTML = {
    "alarm" : "<span class = 'link' id='alarm'  route='/alarm'>alarm</span>",
    "memo" : " <span class = 'link' id='memo'   route='/memo'>memo</span>",
    "image" : "<span class = 'link' id='image'  route='/image'>image</span>",
}

const Icons = document.querySelectorAll(".drop-zone")
const linkBoxes = document.querySelectorAll('.link-box')

let iconsArray = localStorage.getItem(ICONARR_KEY)
let inital_iconArr = ['alarm','image','memo']

if(!iconsArray){
    iconsArray=inital_iconArr
}
else{
    iconsArray=JSON.parse(iconsArray)
}

renderingIcons()
linkBoxes[0].addEventListener('dragstart',drag)
linkBoxes[1].addEventListener('dragstart',drag)
linkBoxes[2].addEventListener('dragstart',drag)
Icons[0].addEventListener('dragover',allowDrop)
Icons[1].addEventListener('dragover',allowDrop)
Icons[2].addEventListener('dragover',allowDrop)
Icons[0].addEventListener('drop',drop)
Icons[1].addEventListener('drop',drop)
Icons[2].addEventListener('drop',drop)

let startInx = -1 , startIcon = ''
let destInx = -1 , destIcon = ''

function allowDrop(ev){
    ev.preventDefault()
}

function drag(ev){
    startIcon = ev.target.innerText
    startInx=iconsArray.indexOf(startIcon)
}

function drop(ev){
    ev.preventDefault()
    destIcon = ev.target.innerText
    destInx = iconsArray.indexOf(destIcon)

    iconsArray.splice(startInx,1)
    iconsArray.splice(destInx,0,startIcon)
    
    renderingIcons()
    window.location.reload()
}

function renderingIcons(){
    iconsArray.map((el,i)=>{
        linkBoxes[i].innerHTML = HTML[el]
    })
    localStorage.setItem(ICONARR_KEY,JSON.stringify(iconsArray))
}





//////////////////////////




function image(){
    const imageBackBtn = document.querySelector('.image-back')
    const imgScrollView = document.querySelector('.img-scroll-view')
    const imgView = document.querySelector('.img-view')
    

    imageBackBtn.addEventListener('click',()=>{
        window.history.back()
    })

    for(let i=1;i<=10;i++){
        let img_src = require('../src/img/img'+String(i)+'.jpg').default
        const img = document.createElement('img')
        img.src=img_src
        img.classList.add('img-preview')

        img.addEventListener('click',imgClick)
        imgScrollView.appendChild(img)
    }
    
    let exOpenImg = ''
    function imgClick(e){
        const openImg = e.target
        openImg.classList.add('draw-boarder')
        if(exOpenImg){
            exOpenImg.classList.remove('draw-boarder')
            imgView.removeChild(imgView.childNodes[0])
        }
        const img = document.createElement('img')
        img.src = openImg.src
        imgView.appendChild(img)

        exOpenImg=openImg
    }
}

module.exports={
    image
}






/////////////////////







const MEMO_KEY = 'memo-array'

function memo(){
    const memoBackBtn = document.querySelector('.memo-back')
    const memoNewBtn = document.querySelector('.memo-new')
    const memoInputForm = document.querySelector('.memo-input-form')
    const memoInput = document.querySelector('.memo-input')
    const memoList = document.querySelector('.memo-list')
    
    let memoArr = localStorage.getItem(MEMO_KEY)
    if(!memoArr) memoArr=[]
    else memoArr=JSON.parse(memoArr)

    memoArr.forEach(renderMemo)

    memoBackBtn.addEventListener('click',()=>{
        window.history.back()
    })

    memoNewBtn.addEventListener('click',()=>{
        memoInputForm.classList.remove('invisible')
    })
    memoInput.addEventListener('keypress',(event)=>{
        if(event.keyCode===13){
            let value = event.target.value
            renderMemo(value)
            memoArr.push(value)
            localStorage.setItem(MEMO_KEY,JSON.stringify(memoArr))
            memoInputForm.classList.add('invisible')
        }
    })
    
    function renderMemo(newMemo){
        const li = document.createElement('li')
        const span = document.createElement('span')
        const hr = document.createElement('hr')
        span.innerText=newMemo
        span.classList.add('ellipsis2')
        span.addEventListener('click',clickMemo)
        li.appendChild(span)
        li.appendChild(hr)
        memoList.appendChild(li)
    }

    let exOpenMemo = ''
    function clickMemo(e){
        let memo = e.target
        if(exOpenMemo) exOpenMemo.classList.add('ellipsis2')
        memo.classList.remove('ellipsis2')
        exOpenMemo = memo
    }
}

module.exports={
    memo
}
